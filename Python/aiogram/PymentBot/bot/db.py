import config
import aiomysql
import logging
from aiogram import Bot

db_conf = config.DB_CONFIG
db_pool = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞

async def create_db_pool():
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å MySQL."""
    global db_pool
    if db_pool is None:
        logging.info("üõ†Ô∏è –°–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î...")
        try:
            db_pool = await aiomysql.create_pool(
                host=db_conf["host"],
                port=db_conf["port"],
                user=db_conf["user"],
                password=db_conf["password"],
                db=db_conf["database"],
                autocommit=True,
                charset='utf8',
                use_unicode=True,
                connect_timeout=15
            )
            logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            raise
    else:
        logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

async def close_db_pool():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    global db_pool
    if db_pool:
        db_pool.close()
        await db_pool.wait_closed()
        db_pool = None
async def ensure_db_pool():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î."""
    global db_pool
    if db_pool is None:
        raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

async def tables_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SHOW TABLES LIKE 'users'")
            users_table = await cur.fetchone()

            await cur.execute("SHOW TABLES LIKE 'payments'")
            payments_table = await cur.fetchone()

    return users_table and payments_table  # True, –µ—Å–ª–∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async def create_tables():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    await ensure_db_pool()
    if not await tables_exist():
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        user_id BIGINT UNIQUE NOT NULL,
                        username VARCHAR(255),
                        subscription_end DATETIME,
                        is_active TINYINT(1) DEFAULT 0,
                        invite_link TEXT,
                        questions_count INT DEFAULT 2,
                        status VARCHAR(10) DEFAULT NULL
                    )
                """)

                # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
                await cur.execute("""
                    CREATE TABLE IF NOT EXISTS payments (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        network VARCHAR(10) NOT NULL,  -- TRC20 –∏–ª–∏ APROS –≤–º–µ—Å—Ç–æ ton_address
                        hash_code VARCHAR(255) NOT NULL,
                        short_key VARCHAR(12) DEFAULT NULL,
                        status ENUM('pending', 'confirmed', 'rejected') NOT NULL DEFAULT 'pending',
                        pricing_plan VARCHAR(32) NOT NULL,
                        that_time_price VARCHAR(32) NOT NULL,
                        comment TEXT DEFAULT NULL,
                        processed_by BIGINT DEFAULT NULL
                    )
                """)

                logging.info("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")

    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")

admins = set()  # –•—Ä–∞–Ω–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
async def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î"""
    global admins
    await ensure_db_pool()

    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT user_id FROM users WHERE status = 'Admin'")
            result = await cur.fetchall()
            admins = {row[0] for row in result}  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤ –≤ set

    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

async def reject_payment(hash_code: str, admin_id: int, comment: str):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç—ë–∂, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                UPDATE payments 
                SET status = 'rejected', processed_by = %s, comment = %s
                WHERE hash_code = %s
            """, (admin_id, comment, hash_code))

    logging.info(f"‚ùå –ü–ª–∞—Ç—ë–∂ —Å —Ö–µ—à–µ–º {hash_code} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
async def approve_payment(hash_code: str, admin_id: int, days:int = 30):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç—ë–∂ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ —Ö–µ—à—É
            await cur.execute("SELECT user_id FROM payments WHERE hash_code = %s", (hash_code,))
            result = await cur.fetchone()
            if not result:
                return None  # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

            user_id = result[0]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            await cur.execute(
                "UPDATE payments SET status = 'confirmed', processed_by = %s WHERE hash_code = %s",
                (admin_id, hash_code)
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cur.execute("SELECT subscription_end FROM users WHERE user_id = %s", (user_id,))
            user_result = await cur.fetchone()

            from datetime import datetime, timedelta

            new_expiry_date = datetime.utcnow() + timedelta(days=days)  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü

            if user_result and user_result[0]:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
                current_expiry = user_result[0]
                if current_expiry > datetime.utcnow():
                    new_expiry_date = current_expiry + timedelta(days=30)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
            await cur.execute(
                "UPDATE users SET subscription_end = %s WHERE user_id = %s",
                (new_expiry_date, user_id)
            )

    return user_id, new_expiry_date


async def get_payment_info(hash_code: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ —Ö–µ—à—É."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DictCursor
            await cur.execute("""
                SELECT * FROM payments WHERE hash_code = %s
            """, (hash_code,))
            return await cur.fetchone()  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
async def save_short_key(hash_code: str, short_key: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                "UPDATE payments SET short_key = %s WHERE hash_code = %s",
                (short_key, hash_code)
            )
async def get_short_key(hash_code: str):
    """–ü–æ–ª—É—á–∞–µ—Ç `short_key` –ø–æ `hash_code`"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute(
                "SELECT short_key FROM payments WHERE hash_code = %s",
                (hash_code,)
            )
            result = await cur.fetchone()
            return result["short_key"] if result else None
async def get_hash_by_short_key(short_key: str):
    """–ü–æ–ª—É—á–∞–µ—Ç `hash_code` –ø–æ `short_key`"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute(
                "SELECT hash_code FROM payments WHERE short_key = %s",
                (short_key,)
            )
            result = await cur.fetchone()
            return result["hash_code"] if result else None


async def get_payment_user(hash_code: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –ø–æ —Ö–µ—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT user_id FROM payments WHERE hash_code = %s
            """, (hash_code,))
            return await cur.fetchone()
async def get_admin_name(user_id: int, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ user_id —á–µ—Ä–µ–∑ Telegram API"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute("SELECT username FROM users WHERE user_id = %s", (user_id,))
            result = await cur.fetchone()

    # –ï—Å–ª–∏ username –µ—Å—Ç—å –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if result and result["username"]:
        return result["username"]

    # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram API
    try:
        user = await bot.get_chat(user_id)
        return user.first_name
    except Exception:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"


async def save_payment_request(user_id: int, hash_code: str, network: str, pricing_plan: str, price:str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO payments (user_id, network, hash_code, pricing_plan, that_time_price, status)
                VALUES (%s, %s, %s, %s, %s, 'pending')
            """, (user_id, network, hash_code, pricing_plan, price))

async def add_user_if_not_exists(user_id: int, username: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            await cur.execute("SELECT COUNT(*) FROM users WHERE user_id = %s", (user_id,))
            result = await cur.fetchone()

            if result[0] == 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                await cur.execute("""
                    INSERT INTO users (user_id, username, subscription_end, status)
                    VALUES (%s, %s, NULL, NULL)
                """, (user_id, username))
                logging.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id} ({username})")
                return True
            return False

async def check_subscription(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT subscription_end FROM users WHERE user_id = %s AND is_active = TRUE
            """, (user_id,))
            result = await cur.fetchone()
            return result[0] if result else None

async def update_invite_link(user_id: int, invite_link: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                UPDATE users SET invite_link = %s WHERE user_id = %s
            """, (invite_link, user_id))

async def get_invite_link(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT invite_link FROM users WHERE user_id = %s
            """, (user_id,))
            result = await cur.fetchone()
            return result[0] if result else None

async def get_hashes():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT hash_code FROM payments
            """)
            result = await cur.fetchall()
            return result if result else None

async def get_users_waiting_for_payment():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute("""
                SELECT user_id, network, hash_code FROM payments
                WHERE status = 'pending'
            """)
            users = await cur.fetchall()
    return users

async def user_is_active(user_id: int):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ)."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT is_active FROM users WHERE user_id = %s
            """, (user_id,))
        return await cur.fetchone()

async def activate_user(user_id: int):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ)."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                UPDATE users SET is_active = TRUE WHERE user_id = %s
            """, (user_id,))

async def deactivate_user(user_id: int):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ)."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                UPDATE users SET is_active = FALSE WHERE user_id = %s
            """, (user_id,))

async def confirm_payment(hash_code: str, admin_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞."""
    await ensure_db_pool()

    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏ network –ø–æ —Ö–µ—à—É
            await cur.execute("""
                SELECT user_id, network FROM payments WHERE hash_code = %s
            """, (hash_code,))
            result = await cur.fetchone()

            if not result:
                logging.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ —Å —Ö–µ—à–µ–º {hash_code} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            user_id, network = result

            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü
            await cur.execute("""
                UPDATE users SET subscription_end = DATE_ADD(NOW(), INTERVAL 1 MONTH), is_active = TRUE
                WHERE user_id = %s
            """, (user_id,))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            await cur.execute("""
                UPDATE payments SET status = 'confirmed', processed_by = %s WHERE hash_code = %s
            """, (admin_id, hash_code))

    logging.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")

async def get_users_by_subscription_status(days: int = None, expired: bool = False):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞."""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            if expired:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
                await cur.execute("""
                    SELECT user_id, subscription_end FROM users
                    WHERE subscription_end IS NOT NULL AND subscription_end < NOW()
                """)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ `days` –¥–Ω–µ–π
                await cur.execute("""
                    SELECT user_id, subscription_end FROM users
                    WHERE subscription_end IS NOT NULL 
                    AND subscription_end BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL %s DAY)
                """, (days,))
            users = await cur.fetchall()
    return users

async def get_all_users():
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—á–∏—Ç–∞—è –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            await cur.execute("""
                SELECT 
                    user_id, 
                    username, 
                    DATEDIFF(subscription_end, NOW()) AS remaining_days
                FROM users
                WHERE status IS NULL AND subscription_end IS NOT NULL AND DATEDIFF(subscription_end, NOW()) >= 0
                ORDER BY remaining_days ASC
            """)
            users = await cur.fetchall()

    return users

async def get_remaining_questions(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT questions_count FROM users WHERE user_id = %s", (user_id,))
            result = await cur.fetchone()
            return result[0] if result else 0

async def decrement_questions(user_id: int):
    """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET questions_count = questions_count - 1 WHERE user_id = %s", (user_id,))

async def reset_questions():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ 2"""
    await ensure_db_pool()
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET questions_count = 2")


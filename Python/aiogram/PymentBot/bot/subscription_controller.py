import logging
import asyncio
import config
from aiogram import Bot
import db
from aiogram.types import (Message, ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)

async def notify_users(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    while True:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ...")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="sub_s1")],
                [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="Contact_the_manager")],
                [InlineKeyboardButton(text="‚ùì FAQ", callback_data="FAQ")]
            ]
        )

        users = await db.get_users_by_subscription_status(days=3)
        for user in users:
            try:
                await bot.send_message(
                    user["user_id"],
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {user["subscription_end"].strftime('%Y-%m-%d %H:%M')}!\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.", reply_markup=keyboard
                )
                logging.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user["user_id"]}.")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user["user_id"]}: {e}")

        await asyncio.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π


async def remove_expired_users(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    while True:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π...")

        users = await db.get_users_by_subscription_status(expired=True)

        for user in users:
            try:
                user_id = int(user["user_id"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int

                logging.info(f"‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

                await bot.ban_chat_member(config.CHANNEL_ID, user_id)
                await bot.unban_chat_member(config.CHANNEL_ID, user_id)  # –ß—Ç–æ–±—ã –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è

                await bot.ban_chat_member(config.CHANNEL2_ID, user_id)
                await bot.unban_chat_member(config.CHANNEL2_ID, user_id)  # –ß—Ç–æ–±—ã –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è

                await db.deactivate_user(user_id)

                await bot.send_message(
                    user_id,
                    "‚ùó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞."
                )

                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.")

            except ValueError:
                logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è user_id: {user}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π user_id

            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await asyncio.sleep(86400)  # –ñ–¥—ë–º 12 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π